//------------------Diffusion function--------------//
/*Explanation of the diffusion function
We concider a square lattice, with a lattice constant 'a'. Each odd row is shifted by 'a/2'. Then we form a triangular (hexagonal) lattice in 2D.
The primitive vectors are 'ax^' and 'asqrt(3)/2j^'. But if the particle moves to an odd row, then we add 'a/2' due to the shift, below is the examply
of the lattice structure
*   *   *   *   *   *   *   *   *
  *   *   *   *   *   *   *   *   *  ----> odd row shifted by 'a/2'
*   *   *   *   *   *   *   *   *
  *   *   *   *   *   *   *   *   *
*   *   *   *   *   *   *   *   *
The index 'i' enumerates the rows and the index 'j' enumerates the columns.
The indexing of the cell is the same as in the square lattice with the difference that if the particle moves 'South-West' and it is in an even row,
the 'i' and 'j' indices increases and decreases by one respectively, and if it moves 'South-East' and it is in an odd row, both 'i' and 'j' increase by one,
and if it moves 'North-East' and it is in an odd row, 'i' and 'j' indices decreases and increases by one respectively, and if it moves 'North-West' and it is 
in an even row both 'i' and 'j' indices decrease by one, otherwise only the 'i' index changes.
In this simulation to reduce the complexity I always consider the lattice size to be odd, so the number of the columns corresponds to the lattice size, and
the number of rows is less by one. This is due to the fact that we want to impose the periodic boundary condition and if the number of columns and the 
number of the rows became the same, the conditions for a periodic boundary is not fulfilled.
Two sets of integer variables are defined. par={par_j_index, par_i_index} and board={board_j_index, board_i_index}. 'par' set stores the indices of the particle.
So if the particle goes through the boundary line and is brought back to the other side of the lattice, the 'par' indices still records the change in the index 
the particle, but 'board' set stores the indices of the lattice, so if the particle goes through the boundary lines, the 'board' indices reset according to the
size of the simulation box. The cartesian coordinates of the particle is then simply multiplication of the 'par' set indices and the primitive vectors.
 */
float **random_walk(int t, int n, int size, int **board, int latt_num, float a)
{
	//ofstream position_file;										//Streaming of particles' position
	//char filename[30];											//Initiating a char variable filename which will contain the name of the file which the position of the particle will be stored on it (comment out the these two lines if you want to store particles' trajectories)

	int board_i_index = (size-1)/2; int board_j_index = size/2;						//board_i(j)_index stores the position of the particle on the lattice board, i.e. it keep tracks of particiles's position whether they are at the boundaries of the lattice board or not
	int par_i_index = (size-1)/2; int par_j_index = size/2;							//Contrary, par_i(j)_index stores the position of the particle as it is performing a random walk in a real world i.e. if the particle reaches the rightside boundary and jumps further, the particle's position will not reset to zero but continues to increase
	int dummy_index = 1;
	while (board[par_i_index][par_j_index] == 1)								//A while loop to find the nearest unoccupied site closest to the centre
	{
		for (int i=-dummy_index; i <= dummy_index; i++)
		{
			for (int j=-dummy_index; j <= dummy_index; j++)
			{
				if (board[par_i_index+i][par_j_index+j] == 0)
				{
					par_i_index = par_i_index + i;
					par_j_index = par_j_index + j;
					goto end;
				}
			}
		}
		dummy_index++;
	}
	end:
	board_i_index = par_i_index;	board_j_index = par_j_index; 						//Equalise the board_i(j)_index and par_i(j)_index
	ofstream initial_pos("initial_pos", ios_base::app | ios_base::out);					//Store the initial position of particles
	initial_pos << par_i_index << "\t" << par_j_index << "\t" << board[par_i_index][par_j_index] << endl;
	cout << par_i_index << "\t" << par_j_index << "\t" << board[par_i_index][par_j_index] << endl;
	initial_pos.close();

	float ran_num;												//Defining a float variable for storing the random number generated by ran1 function

	float **position = new float*[t];									//Initializing a pointer to store particles' positions
	
	for(int i=0; i<t; i++)
	{
		position[i] = new float[2];									//Initiation two more array in the pointer 'position' to store x- and y-position of the particle time at each time step
	}
	
	if (board_i_index%2==0)
		position[0][0] = par_j_index*a;									//Storing the initial x-position of the particle at time zero
	else
		position[0][0] = par_j_index*a + a/float(2);
	position[0][1] = par_i_index*a*sqrt(3)/float(2);							//Storing the initial y-position of the particle at time zero
		
		
		
	/*if (n<3)												//This if statement dictates to only store 4-first run position of the particle (comment out if you want to store the first three trajectories of random walkers
	{
		sprintf(filename,"%s%d%s%d","par_pos_",n,"_",latt_num);
														//Naming the "filename" for different run
		position_file.open(filename);									//Open a text file "par_pos%d.txt" for streaming the particle position
		
		position_file << position[0][0] << "\t" << position[0][1] << endl;
	}*/													//Writing the particle position onto par_pos.txt

	for (int i=1 ; i < t ; i++)
	{
		ran_num = ran1(&idum1);										//Storing the random number generated by function ran1 in ran_num
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------//
		if (ran_num < float(1)/float(6))								//Move East
		{
			if (board_j_index != size-1)								//In the case the particle is not at the right hand side boundary
			{
				if (board[board_i_index][board_j_index+1]==0)					//In the case the right nearby cell is empty
				{
					board_j_index = board_j_index + 1;					//Update the board's j index
					par_j_index = par_j_index + 1;						//Upadet the particle's j index
					if (board_i_index%2==0)							//In the case the particle in is an even row
						position[i][0] = par_j_index*a;					//Update the x-position of the particle
					else									//In the case the particle is in an odd row
						position[i][0] = par_j_index*a + a/float(2);			//Update the x-position of the particle
					position[i][1] = position[i-1][1];					//Update the y-position of the particle
				}
				else										//In the case the right nearby cell is occupied
				{
					position[i][0] = position[i-1][0];					//The x-position of the particle remains unchanged
					position[i][1] = position[i-1][1];					//The y-position of the particle remains unchanged
				}
			}
			else											//In the case the particle is at the right hand side boundary
			{
				if (board[board_i_index][0]==0)							//In the case the nearby cell on the other side (left side) of the lattice is empty
				{
					board_j_index = 0;							//Apply the periodic boundary condition, update the lattice jth index to zero
					par_j_index = par_j_index + 1;						//Update the particle's j index
					if (board_i_index%2==0)							//In the case the particle is in an even row
						position[i][0] = par_j_index*a;					//Update the x-position of the particle
					else									//In the case the particle is in an odd row
						position[i][0] = par_j_index*a + a/float(2);			//Update the x-position of the particle
					position[i][1] = position[i-1][1];					//Update the y-position of the particle
				}
				else										//In the case the right nearby cell at the other side (left side) of the lattice is occupied
				{
					position[i][0] = position[i-1][0];					//The x-position of the particle remains unchanged
					position[i][1] = position[i-1][1];					//The y-position of the particle remains unchanged
				}
			}
		}
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------//
		if (ran_num >=float(1)/float(6) && ran_num < float(2)/float(6))					//Move West
		{
			if (board_j_index != 0)									//In the case the particle is not at the left hand side boundary
			{
				if (board[board_i_index][board_j_index-1]==0)					//In the case the left nearby cell is empty
				{
					board_j_index = board_j_index - 1;					//Update the board's j index
					par_j_index = par_j_index - 1;						//Update the particle's j index
					if (board_i_index%2==0)							//In the case the particle is in an even row
						position[i][0] = par_j_index*a;					//Update the x-position of the particle
					else									//In the case the particle is in an odd row
						position[i][0] = par_j_index*a + a/float(2);			//Update the x-position of the particle
					position[i][1] = position[i-1][1];					//Update the y-position of the particle
				}
				else										//In the case the left nearby cell is occupied
				{
					position[i][0] = position[i-1][0];					//The x-position of the particle remains unchanged
					position[i][1] = position[i-1][1];					//The y-position of the particle remains unchanged
				}
			}
			else											//In the case the particle is at the left hand side boundary
			{
				if (board[board_i_index][size-1]==0)						//In the case the nearby cell on the other side (right side) of the lattice is empty
				{
					board_j_index = size-1;							//Apply the periodic boundary condition, update the lattice jth index to the size of the lattice
					par_j_index = par_j_index - 1;						//Update the particle's j index
					if (board_i_index%2==0)							//In the case the particle is in an even row
						position[i][0] = par_j_index*a;					//Update the x-position of the particle
					else									//In the case the particle is in an odd row
						position[i][0] = par_j_index*a + a/float(2);			//Update the y-position of the particle
					position[i][1] = position[i-1][1];
				}
				else										//In the case the left nearby cell at the other side (right side) of the lattice is occupied
				{
					position[i][0] = position[i-1][0];					//The x-position of the particle remains unchanged
					position[i][1] = position[i-1][1];					//The y-position of the particle remains unchanged
				}
			}
		}
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------//
		if (ran_num >=float(2)/float(6) && ran_num < float(3)/float(6))					//Move North-East
		{
			if (board_j_index != size-1)								//In the case the particle is not at the right hand side boundary
			{
				if (board_i_index != 0)								//In the case the particle in not at the top side boundary
				{
					if (board_i_index%2==0)							//In the case the particle is in an even row
					{
						if (board[board_i_index-1][board_j_index]==0)			//In the case the up-right cell is empty
						{
							board_i_index = board_i_index - 1;			//Update the board's ith index
							par_i_index = par_i_index - 1;				//Update the particle's ith index
							position[i][0] = par_j_index*a + a/float(2);		//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-positino of the particle
						}
						else								//In the case the up-right cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
					else									//In the case the particle is in an odd row
					{
						if (board[board_i_index-1][board_j_index+1]==0)			//In the case the up-right cell is empty
						{								//Once the particle moves towards north-east, since it is in an odd row, the both i and j indices increase by one
							board_i_index = board_i_index - 1;			//Update the board's ith index
							board_j_index = board_j_index + 1;			//Update the board's jth index
							par_i_index = par_i_index - 1;				//Update the particle's ith index
							par_j_index = par_j_index + 1;				//Update the particle's jth index
							position[i][0] = par_j_index*a;				//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the up-right cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
				}
				else										//In the case the particle is at the top side boundary (but it is not at top-right corner)
				{
					if (board[size-2][board_j_index]==0)					//Apply the periodic boundary condition and check if the up(at the bottom side of the lattice)-right cell is empty
					{									//Since we know that the particle was in an even row
						board_i_index = size-2;						//Bring the particle to the bottom of the lattice (periodic boundary condition)
						par_i_index = par_i_index - 1;					//Update the particle's ith index
						position[i][0] = par_j_index*a + a/float(2);			//Update the x-position of the particle
						position[i][1] = par_i_index*a*sqrt(3)/float(2);		//Update the y-position of the particle
					}
					else									//In the case the up(at the bottom side of the lattice)-right cell is occupied
					{
						position[i][0] = position[i-1][0];				//The x-position of the particle remains unchanged
						position[i][1] = position[i-1][1];				//The y-position of the particle remains unchanged
					}
				}
			}
			else											//In the case the particle is at the right hand side boundary
			{
				if (board_i_index%2 == 0)							//In the case the particle is in an even row
				{
					if (board_i_index == 0)							//In the case the particle is at the top-right corner
					{
						if (board[size-2][0] == 0)					//In the case the bottom-left corner cell is empty
						{
							board_i_index = size-2;					//Bring the particle to the bottom of the lattice (periodic boundary condition)
							board_j_index = 0;					//Bring the particle to the left side of the lattice (periodic boundary condition)
							par_i_index = par_i_index - 1;				//Update the particle's ith index
							position[i][0] = par_j_index*a + a/float(2);		//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the bottom-left corner cell is occpuied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remanis unchanged
							position[i][1] = position[i-1][1];			//the y-position of the particle remains unchanged
						}
					}
					else									//In the case the particle is in an even row but not at the top-right corner
					{
						if (board[board_i_index-1][board_j_index] == 0)			//In the case the up-right cell is empty
						{
							board_i_index = board_i_index - 1;			//Update the board's ith index
							par_i_index = par_i_index - 1;				//Update the particle's ith index
							position[i][0] = par_j_index*a + a/float(2);		//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the up-right cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
				}
				else										//In the case the particle in in an odd row
				{
					if (board[board_i_index-1][0] == 0)					//In the case the up-right (at the left hand side of the lattice) is empty
					{
						board_i_index = board_i_index - 1;				//Update the board's ith index
						board_j_index = 0;						//Bring the particle to the left hand side of the lattice
						par_i_index = par_i_index - 1;					//Update the particle's ith index
						par_j_index = par_j_index + 1;					//Update the particle's jth index
						position[i][0] = par_j_index*a;					//Update the x-position of the particle
						position[i][1] = par_i_index*a*sqrt(3)/float(2);		//Update the y-position of the particle
					}
					else									//In the case the up-right (at the left hand side of the lattice) is occupied
					{
						position[i][0] = position[i-1][0];				//Update the x-position of the particle
						position[i][1] = position[i-1][1];				//Update the y-position of the particle
					}
				}
			}
		}
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------//
		if (ran_num >= float(3)/float(6) && ran_num < float(4)/float(6))				//Move North-West
		{
			if (board_j_index != 0)									//In the case the particle is not at the left hand side boundary
			{
				if (board_i_index != 0)								//In the case the particle is not at the top of the lattice boundary
				{
					if (board_i_index%2 == 0)						//In the case the particle is in an even row
					{									//In this case the j index of the particle decreases by one
						if (board[board_i_index-1][board_j_index-1] == 0)		//In the case the up-left cell is empty
						{
							board_i_index = board_i_index - 1;			//Update the board's ith index
							board_j_index = board_j_index - 1;			//Update the board's jth index
							par_i_index = par_i_index - 1;				//Update the particle's ith index
							par_j_index = par_j_index - 1;				//Update the particle's jth index
							position[i][0] = par_j_index*a + a/float(2);		//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the up-left cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
					else									//In the case the particle is in an odd row
					{									//In this case the j index of the particle does not change
						if (board[board_i_index-1][board_j_index] == 0)			//In the case the up-left cell is empty
						{
							board_i_index = board_i_index - 1;			//Update the board's ith index
							par_i_index = par_i_index - 1;				//Update the particle's ith index
							position[i][0] = par_j_index*a;				//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the up-left cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
				}
				else										//The particle is at the top of the lattice boundary (but it is still not at the left hand side boundary)
				{
					if (board[size-2][board_j_index-1] == 0)				//In the case the up(at the bottom side of the lattice)-left cell is empty
					{
						board_i_index = size-2;						//Bring the particle to the bottom side of the lattice (periodic boundary condition)
						board_j_index = board_j_index - 1;				//Update the board's jth index
						par_i_index = par_i_index - 1;					//Update the particle's ith index
						par_j_index = par_j_index - 1;					//Update the particle's jth index
						position[i][0] = par_j_index*a + a/float(2);			//Update the x-position of the particle
						position[i][1] = par_i_index*a*sqrt(3)/float(2);		//Update the y-position of the particle
					}
					else									//In the case the up(at the bottom side of the lattice)-left cell is occupied
					{
						position[i][0] = position[i-1][0];				//The x-position of the particle remains unchanged
						position[i][1] = position[i-1][1];				//The y-position of the particle remains unchanged
					}
				}
			}
			else											//In the case the particle is at the left hand side boundary
			{
				if (board_i_index%2 == 0)							//In the case the particle is in an even row
				{
					if (board_i_index == 0)							//In the case the particle is at the top-left corner
					{
						if (board[size-2][size-1] == 0)					//In the case the bottom-right corner is empty
						{
							board_i_index = size-2;					//Update the board's ith index
							board_j_index = size-1;					//Update the board's jth index
							par_i_index = par_i_index - 1;				//Update the particle's ith index
							par_j_index = par_j_index - 1;				//Update the particle's jth index
							position[i][0] = par_j_index*a + a/float(2);		//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the bottom-right corner is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
					else									//In the case the particle in in an even row but not at the top-left corner
					{
						if (board[board_i_index-1][size-1] == 0)			//In the case the up-left(on the right hand side of the lattice) cell is empty
						{
							board_i_index = board_i_index - 1;			//Update the board's ith index
							board_j_index = size-1;					//Update the board's jth index
							par_i_index = par_i_index - 1;				//Update the particle's ith index
							par_j_index = par_j_index - 1;				//Update the particle's jth index
							position[i][0] = par_j_index*a + a/float(2);		//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the up-left(on the right hand side of the lattice) cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
				}
				else										//In the case the particle is in an odd row
				{
					if (board[board_i_index-1][board_j_index] == 0)				//In the case the up-left cell is empty
					{
						board_i_index = board_i_index - 1;				//Update the board's ith index
						par_i_index = par_i_index - 1;					//Update the particle's ith index
						position[i][0] = par_j_index*a;					//Update the x-position of the particle
						position[i][1] = par_i_index*a*sqrt(3)/float(2);		//Update the y-position of the particle
					}
					else									//In the case the up-left cell is occupied
					{
						position[i][0] = position[i-1][0];				//The x-position of the particle remains unchanged
						position[i][1] = position[i-1][1];				//The y-position of the particle remains unchanged
					}
				}
			}
		}
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------//
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------//
		if (ran_num >=float(4)/float(6) && ran_num < float(5)/float(6))					//Move South-West
		{
			if (board_j_index != 0)									//In the case the particle is not at the left hand side boundary
			{
				if (board_i_index != size-2)							//In the case the particle in not at the bottom side boundary
				{
					if (board_i_index%2 != 0)						//In the case the particle is in an odd row
					{
						if (board[board_i_index+1][board_j_index]==0)			//In the case the down-left cell is empty
						{
							board_i_index = board_i_index + 1;			//Update the board's ith index
							par_i_index = par_i_index + 1;				//Update the particle's ith index
							position[i][0] = par_j_index*a;				//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-positino of the particle
						}
						else								//In the case the up-right cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
					else									//In the case the particle is in an even row
					{
						if (board[board_i_index+1][board_j_index-1]==0)			//In the case the down-left cell is empty
						{								
							board_i_index = board_i_index + 1;			//Update the board's ith index
							board_j_index = board_j_index - 1;			//Update the board's jth index
							par_i_index = par_i_index + 1;				//Update the particle's ith index
							par_j_index = par_j_index - 1;				//Update the particle's jth index
							position[i][0] = par_j_index*a + a/float(2);		//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the down-left cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
				}
				else										//In the case the particle is at the bottom side boundary (but it is not at the bottom-left corner)
				{
					if (board[0][board_j_index]==0)						//Apply the periodic boundary condition and check if the down(at the top side of the lattice)-left cell is empty
					{									
						board_i_index = 0;						//Bring the particle to the top of the lattice (periodic boundary condition)
						par_i_index = par_i_index + 1;					//Update the particle's ith index
						position[i][0] = par_j_index*a;					//Update the x-position of the particle
						position[i][1] = par_i_index*a*sqrt(3)/float(2);		//Update the y-position of the particle
					}
					else									//In the case the down(at the top side of the lattice)-left cell is occupied
					{
						position[i][0] = position[i-1][0];				//The x-position of the particle remains unchanged
						position[i][1] = position[i-1][1];				//The y-position of the particle remains unchanged
					}
				}
			}
			else											//In the case the particle is at the left hand side boundary
			{
				if (board_i_index%2 == 0)							//In the case the particle in in an even row
				{
					if (board[board_i_index+1][size-1] == 0)				//In the case the down-left(at the right hand side of the lattice) cell is empty
					{
						board_i_index = board_i_index + 1;				//Update the board's ith index
						board_j_index = size - 1;					//Bring the particle to the right hand side of the lattice (periodic boundary condition)
						par_i_index = par_i_index + 1;					//Update the particle's ith index
						par_j_index = par_j_index - 1;					//Update the particle's jth index
						position[i][0] = par_j_index*a + a/float(2);			//Update the x-position of the particle
						position[i][1] = par_i_index*a*sqrt(3)/float(2);		//Update the y-position of the particle
					}
					else									//In the case the down-left(at the right hand side of the lattice) cell is occupied
					{
						position[i][0] = position[i-1][0];				//The x-position of the particle remains unchanged
						position[i][1] = position[i-1][1];				//The y-position of the particle remains unchanged
					}
				}
				else										//In the case the particle is in an odd row
				{
					if (board_i_index == size-2)						//In the case the particle is at the bottom of the lattice
					{
						if (board[0][size-1] == 0)					//In the case the top-right corner cell is empty
						{
							board_i_index = 0;					//Update the board's ith index
							board_j_index = size-1;					//Update the board's jth index
							par_i_index = par_i_index + 1;				//Update the particle's ith index
							position[i][0] = par_j_index*a;				//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the top-right corner cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
					else									//In the case the particle is in an odd row but not at the bottom of the lattice
					{
						if (board[board_i_index+1][board_j_index] == 0)			//In the case the down-left cell is empty
						{
							board_i_index = board_i_index + 1;			//Update the board's ith index
							par_i_index = par_i_index + 1;				//Update the particle's ith index
							position[i][0] = par_j_index*a;				//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the down-left cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
				}
			}
		}
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------//
		if (ran_num >= float(5)/float(6))								//Move South-East
		{
			if (board_j_index != size-1)								//In the case the particle is not at the right hand side boundary
			{
				if (board_i_index != size-2)							//In the case the particle is not at the bottom of the lattice boundary
				{
					if (board_i_index%2 != 0)						//In the case the particle is in an odd row
					{									
						if (board[board_i_index+1][board_j_index+1] == 0)		//In the case the down-right cell is empty
						{
							board_i_index = board_i_index + 1;			//Update the board's ith index
							board_j_index = board_j_index + 1;			//Update the board's jth index
							par_i_index = par_i_index + 1;				//Update the particle's ith index
							par_j_index = par_j_index + 1;				//Update the particle's jth index
							position[i][0] = par_j_index*a;				//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the down-right cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
					else									//In the case the particle is in an even row
					{									
						if (board[board_i_index+1][board_j_index] == 0)			//In the case the down-right cell is empty
						{
							board_i_index = board_i_index + 1;			//Update the board's ith index
							par_i_index = par_i_index + 1;				//Update the particle's ith index
							position[i][0] = par_j_index*a + a/float(2);		//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the down-right cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
				}
				else										//In the case the particle is at the bottom of the lattice boundary (but still not at the right hand side boundary)
				{
					if (board[0][board_j_index+1] == 0)					//In the case the down(at the top of the lattice)-right cell is empty
					{
						board_i_index = 0;						//Update the board's ith index
						board_j_index = board_j_index + 1;				//Update the board's jth index
						par_i_index = par_i_index + 1;					//Update the particle's ith index
						par_j_index = par_j_index + 1;					//Update the particle's jth index
						position[i][0] = par_j_index*a;					//Update the x-position of the particle
						position[i][1] = par_i_index*a*sqrt(3)/float(2);		//Update the y-position of the particle
					}
					else									//In the case the down(at the top of the lattice)-right cell is occupied
					{
						position[i][0] = position[i-1][0];				//The x-position of the particle remains unchanged
						position[i][1] = position[i-1][1];				//The y-position of the particle remains unchanged
					}
				}
			}
			else											//In the case the particle is at the right hand side boundary
			{
				if (board_i_index%2 == 0)							//In the case the particle is in an even row
				{
					if (board[board_i_index+1][board_j_index] == 0)				//In the case the down-right cell is empty
					{
						board_i_index = board_i_index + 1;				//Update the board's ith index
						par_i_index = par_i_index + 1;					//Update the particle's ith index
						position[i][0] = par_j_index*a + a/float(2);			//Update the x-position of the particle
						position[i][1] = par_i_index*a*sqrt(3)/float(2);		//Update the y-position of the particle
					}
					else									//In the case the down-right cell is occupied
					{
						position[i][0] = position[i-1][0];				//The x-position of the particle remains unchanged
						position[i][1] = position[i-1][1];				//The y-position of the particle remains unchanged
					}
				}
				else										//In the case the particle is in an odd row
				{
					if (board_i_index == size-2)						//In the case the particle is at the bottom-right corner
					{
						if(board[0][0] == 0)						//In the case the top-left corner cell is empty
						{
							board_i_index = 0;					//Bring the particle to the top of the lattice (periodic boundary condition)
							board_j_index = 0;					//Bring the particle to the left hand side of the lattice (periodic boundary condition)
							par_i_index = par_i_index + 1;				//Update the particle's ith index
							par_j_index = par_j_index + 1;				//Update the particle's jth index
							position[i][0] = par_j_index*a;				//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the top-left corner cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
					else									//In the case the particle is in an odd row (but not at the bottom-right corner)
					{
						if(board[board_i_index+1][0] == 0)				//In the case the down-right(at the left hand side of the lattice) cell is empty
						{
							board_i_index = board_i_index + 1;			//Update the board's ith index
							board_j_index = 0;					//Bring the particle to the left hand side of the lattice
							par_i_index = par_i_index + 1;				//Update the particle's ith index
							par_j_index = par_j_index + 1;				//Update the particle's jth index
							position[i][0] = par_j_index*a;				//Update the x-position of the particle
							position[i][1] = par_i_index*a*sqrt(3)/float(2);	//Update the y-position of the particle
						}
						else								//In the case the down-right(at the left hand side of the lattice) cell is occupied
						{
							position[i][0] = position[i-1][0];			//The x-position of the particle remains unchanged
							position[i][1] = position[i-1][1];			//The y-position of the particle remains unchanged
						}
					}
				}
			}
		}
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------//
		/*if (n<3)											//Only for the 4-first runs
		{
			position_file << position[i][0] << "\t" << position[i][1] << endl;
		}*/												//Streaming the position of the particle on par_pos.txt
	}
	//if(n<3) position_file.close();						//Since for only the 4-first runs the stream file is opened

	return position;
}
//-----------------------End of diffusion function--------------------//
